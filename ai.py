import streamlit as st
import string
import pickle
import os
from spacy.lang.en.stop_words import STOP_WORDS as stopwords
from PyPDF2 import PdfReader
from docx import Document
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Constants
MAX_FILE_SIZE_MB = 2  # Maximum file size in MB
SUPPORTED_EXTENSIONS = ["pdf", "txt", "docx"]

# Page Title
st.title("AI VS HUMAN TEXT DETECTOR")
st.write("Detect whether text is AI-generated or written by a human.")

# CSS Styling
st.markdown(
    """
    <style>
        .container {
            position: relative;
            margin-bottom: 30px;
        }
        .text-area {
            width: 100%;
            height: 150px;
            padding: 10px;
            font-size: 16px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        .button {
            background-color: #4CAF50;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
        }
        .button:hover {
            background-color: #ffcccc;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

# Contractions Dictionary
contractions = {
    "ain't": "am not",
    "aren't": "are not",
    "can't": "cannot",
    # Add more contractions as needed
}

# Clean Text Function
def clean_text(text):
    text = text.replace("\n", " ").replace("'", " ")
    text = "".join([ch for ch in text if ch not in string.punctuation])
    text = " ".join([word for word in text.split() if word.lower() not in stopwords])
    for key, value in contractions.items():
        text = text.replace(key, value)
    return text

# Process Uploaded Files
def process_file(uploaded_file):
    file_size_mb = uploaded_file.size / (1024 * 1024)
    if file_size_mb > MAX_FILE_SIZE_MB:
        st.error(f"File size exceeds {MAX_FILE_SIZE_MB} MB limit.")
        return None

    file_extension = uploaded_file.name.split(".")[-1].lower()
    if file_extension not in SUPPORTED_EXTENSIONS:
        st.error(f"Unsupported file type. Allowed types: {', '.join(SUPPORTED_EXTENSIONS)}")
        return None

    if file_extension == "pdf":
        reader = PdfReader(uploaded_file)
        return " ".join(page.extract_text() for page in reader.pages)
    elif file_extension == "docx":
        doc = Document(uploaded_file)
        return " ".join(paragraph.text for paragraph in doc.paragraphs)
    elif file_extension == "txt":
        return uploaded_file.read().decode("utf-8")
    else:
        st.error("Unable to process the file.")
        return None

# Email Sending Function
def send_email(recipient, subject, body):
    sender_email = "ajaychintu2003@gmail.com"  # Replace with your email
    sender_password = "sloqakyvxcstlxhd"  # Replace with your email's app password
    smtp_server = "smtp.gmail.com"
    smtp_port = 587

    try:
        # Create the email
        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = recipient
        message["Subject"] = subject

        # Attach the body
        message.attach(MIMEText(body, "plain"))

        # Connect to the server
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, recipient, message.as_string())
            st.success("Email sent successfully!")

    except Exception as e:
        st.error(f"Failed to send email: {e}")

# File Upload Section
uploaded_file = st.file_uploader("Upload a document (pdf, txt, docx)", type=SUPPORTED_EXTENSIONS)

# Text Input Section
input_ = st.text_area("Enter your text", height=150, placeholder="Paste your text here...")

# Buttons
if st.button("Submit"):
    if uploaded_file:
        input_ = process_file(uploaded_file)

    if not input_:
        st.error("No valid text found to process.")
    else:
        # Clean Text
        input_cleaned = clean_text(input_)

        # Load Models
        clf_svm = pickle.load(open("clf.pkl", "rb"))
        tfidf = pickle.load(open("tfidf.pkl", "rb"))

        # Predict and Display Result
        text_vectorized = tfidf.transform([input_cleaned])
        result = clf_svm.predict(text_vectorized)

        if result:
            st.markdown("<h3 style='color: #E53935;'>Your text is generated by AI</h3>", unsafe_allow_html=True)
        else:
            st.markdown("<h3 style='color: #43A047;'>Your text is generated by a Human</h3>", unsafe_allow_html=True)

# Feedback and Help Sections
if st.button("Feedback"):
    st.markdown(
        "Email your feedback to: <a href='mailto:21ve1a05b0@sreyas.ac.in'>21ve1a05b0@sreyas.ac.in</a>",
        unsafe_allow_html=True,
    )

if st.button("Help Document"):
    st.markdown(
        """
        <h3>How to Use the AI Detector:</h3>
        <ul>
            <li>Enter text in the text area or upload a document.</li>
            <li>Click "Submit" to analyze the text.</li>
            <li>Results will indicate if the text is AI-generated or human-written.</li>
            <li>For feedback, click the "Feedback" button.</li>
        </ul>
        """,
        unsafe_allow_html=True,
    )

# Email Sending Integration
recipient_email = st.text_input("Recipient Email for Results")
if st.button("Send Results via Email"):
    if recipient_email:
        subject = "Plagiarism Detector Results"
        body = f"Results:\n\n{input_}"
        send_email(recipient_email, subject, body)
    else:
        st.error("Please enter a valid recipient email.")